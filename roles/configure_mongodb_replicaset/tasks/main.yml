- name: Set replication configuration in mongod.conf
  blockinfile:
    path: /etc/mongod.conf
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    block: |
      replication:
        replSetName: "{{ replica_set_name }}"
  notify: Restart MongoDB

- name: Ensure bindIp allows connections from all nodes
  lineinfile:
    path: /etc/mongod.conf
    regexp: '^(\s*)bindIp:'
    line: '\1bindIp: 0.0.0.0'
    backrefs: yes
  notify: Restart MongoDB

- name: Ensure MongoDB service is restarted and enabled
  service:
    name: mongod
    state: restarted
    enabled: true

- name: Wait for MongoDB to be ready on all nodes
  wait_for:
    host: "{{ ansible_host }}"
    port: 27017
    state: started
    timeout: 60

- name: Initialize Replica Set on Primary if not initialized
  shell: |
    mongosh --host "{{ hostvars['mongodb1'].ansible_host }}" --eval '
      var config = {
        _id: "{{ replica_set_name }}",
        members: [
          { _id: 0, host: "{{ hostvars['mongodb1'].ansible_host }}:27017", priority: 2 },
          { _id: 1, host: "{{ hostvars['mongodb2'].ansible_host }}:27017", priority: 1 },
          { _id: 2, host: "{{ hostvars['mongodb3'].ansible_host }}:27017", priority: 1 }
        ]
      };
      rs.initiate(config);
    '
  when: inventory_hostname == "mongodb1"
  register: rs_init
  failed_when: rs_init.rc != 0 and "'already initialized' not in rs_init.stderr"
  ignore_errors: yes

- name: Verify Replica Set Status
  shell: |
    mongosh --host "{{ hostvars['mongodb1'].ansible_host }}" --eval 'rs.status()'
  when: inventory_hostname == "mongodb1"
  register: rs_status
  failed_when: rs_status.rc != 0
